plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
}

if (System.getenv('MOD_VERSION') != null) {
	mod_version = System.getenv('MOD_VERSION')
}
version = mod_version

base {
	archivesName = "${mod_id}-${minecraft_version}-neoforge"
}


java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
	minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'
		jvmArguments.addAll('-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions')
		modSource project.sourceSets.main
	}

	client {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument "--username=Dev"
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
//        programArgument '--nogui'
	}

	data {
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
		content {
			includeGroup "com.klikli_dev"
		}
	}
	maven {
		name = "JEI"
		url = 'https://maven.blamejared.com/'
		content {
			includeGroup "mezz.jei"
		}
	}
	maven {
		name = "Curios Maven"
		url = "https://maven.theillusivec4.top/"
		content {
			includeGroup "top.theillusivec4.curios"
		}
	}
	maven {
		name = "Geckolib Maven"
		url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
		content {
			includeGroup "software.bernie.geckolib"
		}
	}
	maven {
		name = "SBL Maven"
		url "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
		content {
			includeGroup "net.tslat.smartbrainlib"
		}
	}
	maven {
		name = "OctoStudios (Curios Api Contiunation)"
		url = uri("https://maven.octo-studios.com/releases")
		content {
			includeGroup "top.theillusivec4.curios"
		}
	}
	maven {
		// Shedaniel's maven (Architectury API)
		url = "https://maven.architectury.dev"
		content {
			includeGroup "dev.architectury"
		}
	}

	maven {
		// saps.dev Maven (KubeJS and Rhino)
		url = "https://maven.saps.dev/releases"
		content {
			includeGroup "dev.latvian.mods"
			includeGroup "dev.latvian.apps"
		}
	}
	maven {
		//used by kubejs
		url 'https://jitpack.io'
		content {
			includeGroup "com.github.rtyley"
		}
	}

	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "TerraformersMC (emi)"
		url = "https://maven.terraformersmc.com/"
		content {
			includeGroup "dev.emi"
		}
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"

	implementation "com.klikli_dev:occultism-${minecraft_version}-neoforge:${occultism_version}"

	implementation "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
}

processResources {
	def props = new HashMap<>(project.properties)
	def keys = new ArrayList<String>(props.keySet()) //to avoid concurrent modification exception

	for (String key : keys) {
		if (!(props.get(key) instanceof String) && !(props.get(key) instanceof Integer)) {
			props.remove(key)
		}
	}

	if (System.getenv('MOD_VERSION') != null) {
		props.put('mod_version', System.getenv('MOD_VERSION'))
	}

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand props
	}
	getInputs().properties(props)
}

java {
	withSourcesJar()
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : mod_id,
				"Specification-Vendor"    : mod_authors,
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : mod_version,
				"Implementation-Vendor"   : mod_authors,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()

			from components.java

			pom {
				name = mod_name
				description = "${mod_description}"
				url = 'https://github.com/klikli-dev/occultism-kubejs'
				licenses {
					license {
						name = 'MIT'
						url = 'https://github.com/klikli-dev/occultism-kubejs#licensing'
					}
				}
				scm {
					connection = 'scm:git:ssh:git@github.com:klikli-dev/occultism-kubejs.git'
					url = 'https://github.com/klikli-dev/occultism-kubejs'
				}
			}
		}
	}
	repositories {
		maven {
			name = "cloudsmith"
			url = "https://maven.cloudsmith.io/klikli-dev/mods/"
			def releasesRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
			def snapshotsRepoUrl = "https://maven.cloudsmith.io/klikli-dev/mods/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = System.getenv('MAVEN_USER')
				password = System.getenv('MAVEN_PASS')
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}